<GenericPlugin>
    <Application>
        <monitoredAttributes>
            <monitoredAttribute agentPluginName="Dummy" maType="PluginMonitored1" uiName="Dummy" units="Number"/>
        </monitoredAttributes>
        <contextualAttributes/>
        <staticAttributes>
            <staticAttribute agentPluginName="Last VPN Connection Status" isGlobal="true" uiName="Market"/>
            <staticAttribute agentPluginName="Days Since Last Connected" isGlobal="true" uiName="Image Build Number"/>
            <staticAttribute agentPluginName="Last VPN Connection Date" isGlobal="true" uiName="LOB"/>
            <staticAttribute agentPluginName="Last Connection to VPN Period in Hours" isGlobal="true" uiName="Channel"/>
        </staticAttributes>
    </Application>
    <AgentConfiguration>
        <Plugin alias="PowerShell" dllName="Com.Aternity.Agent.PowerShellPlugin.dll" frequency="7200000" invokeWhenNotReporting="true" reportingFrequency="7200000"/>
        <Parameters>
            <Parameter name="ScriptTimeout" value="40000"/>
            <Parameter name="ScriptContext" value="System"/>
            <Parameter name="Script" value="ScriptCdata">
                <Script><![CDATA[Try
{
	#Set new environment for Action Extensions Methods 
    Add-Type -Path $env:STEELCENTRAL_ATERNITY_AGENT_HOME\ActionExtensionsMethods.dll
	#Set Domain
    $domain = Get-ItemPropertyValue -path 'HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters\' -name Domain
    # Silently Connect to domain
    If ((Get-WmiObject Win32_OperatingSystem).Version -like "*10.0*") {
        $ConnectedNow = (Test-NetConnection $domain -Port 636).TcpTestSucceeded
    } Else {
        $ConnectedNow = Test-Connection $domain -quiet
    }
	#Grab Last Conencted date from event Log with Timespan
	$EvLogLastConnect = (Get-WinEvent -logname "Microsoft-Windows-NetworkProfile/Operational" |where-object {$_.ID -eq "10000"} |Where-Object {$_.message -like "*Domain Authenticated*"} |Group-object ID |Foreach-Object {$_.Group | Sort-Object TimeCreated | Select-Object -Last 1}).TimeCreated |New-TimeSpan
	#Grab Last Conencted date from event Log for actual Date
	$EvLogLastConnectDate = (Get-WinEvent -logname "Microsoft-Windows-NetworkProfile/Operational" |where-object {$_.ID -eq "10000"} |Where-Object {$_.message -like "*Domain Authenticated*"} |Group-object ID |Foreach-Object {$_.Group | Sort-Object TimeCreated | Select-Object -Last 1}).TimeCreated

	If ($ConnectedNow -eq $False)
	{
		#Grab Last Disconnected Date from event log with Timespan
		$EvLogLastDisConn = (Get-WinEvent -logname "Microsoft-Windows-NetworkProfile/Operational" |where-object {$_.ID -eq "10001"} |Where-Object {$_.message -like "*Domain Authenticated*"} |Group-object ID |Foreach-Object {$_.Group | Sort-Object TimeCreated | Select-Object -Last 1}).TimeCreated|New-TimeSpan
		#Grab Last Disconnected date from Event Log for actual Date
		$EvLogLastDisConnDate = (Get-WinEvent -logname "Microsoft-Windows-NetworkProfile/Operational" |where-object {$_.ID -eq "10001"} |Where-Object {$_.message -like "*Domain Authenticated*"} |Group-object ID |Foreach-Object {$_.Group | Sort-Object TimeCreated | Select-Object -Last 1}).TimeCreated
		If ($EvLogLastDisConn.TotalHours -lt $EvLogLastConnect.TotalHours)
		{
			$ConnectionPeriod = [math]::round($EvLogLastConnect.TotalHours - $EvLogLastDisConn.TotalHours,2)
			$VPNConnectionDateTime = "This device was connected to domain for period of $ConnectionPeriod Hours. Last connection to $domain domain was at $EvLogLastConnectDate"
			$DaysSinceLastConnected = [math]::round($EvLogLastDisConn.TotalDays,4)
		}
		else 
		{
			$VPNConnectionDateTime = "Eventlogs do not indicate period online, perhaps device not gracefully shutdown."
			$ConnectionPeriod = 0
			$DaysSinceLastConnected = [math]::round($EvLogLastConnect.TotalDays,4)
		}
	} 
	else 
	{
		$ConnectionPeriod = [math]::round($EvLogLastConnect.TotalHours,2)
		$VPNConnectionDateTime =  "This device has been connected to domain for period of $ConnectionPeriod Hours. Last connection to $Domain domain was at $EvLogLastConnectDate"
		$DaysSinceLastConnected = 0
	}
	[ActionExtensionsMethods.PowershellPluginMethods]::SetAttributeValueDouble("Days Since Last Connected",$DaysSinceLastConnected)
	[ActionExtensionsMethods.PowershellPluginMethods]::SetAttributeValueDouble("Last Connection to VPN Period in Hours",$ConnectionPeriod)
    [ActionExtensionsMethods.PowershellPluginMethods]::SetAttributeValueString("Last VPN Connection Date",$EvLogLastConnectDate)
    [ActionExtensionsMethods.PowershellPluginMethods]::SetAttributeValueString("Last VPN Connection Status",$VPNConnectionDateTime)
}

catch 
{
	[ActionExtensionsMethods.ActionExtensionsMethods]::SetFailed($_.Exception.Message)
}
]]></Script>
            </Parameter>
        </Parameters>
    </AgentConfiguration>
</GenericPlugin>