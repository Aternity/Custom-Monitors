<GenericPlugin>
    <Application>
        <monitoredAttributes>
            <monitoredAttribute agentPluginName="EventOccurred" maType="PluginMonitored1" uiName="EventOccurred" units="Number"/>
        </monitoredAttributes>
        <contextualAttributes>
            <contextualAttribute agentPluginName="Component" saType="PluginContextual1" uiName="Component Type"/>
            <contextualAttribute agentPluginName="ComponentVersion" saType="PluginContextual2" uiName="Component Version Type"/>
            <contextualAttribute agentPluginName="SubComponent" saType="PluginContextual3" uiName="Sub Component Type"/>
            <contextualAttribute agentPluginName="SubComponentVersion" saType="PluginContextual4" uiName="Sub Component Version Type"/>
            <contextualAttribute agentPluginName="Details" saType="PluginContextual5" uiName="Details"/>
            <contextualAttribute agentPluginName="Error" saType="PluginContextual6" uiName="Error"/>
            <contextualAttribute agentPluginName="ApplicationName" saType="ApplicationName" uiName="Application Name"/>
        </contextualAttributes>
        <staticAttributes/>
    </Application>
    <AgentConfiguration>
        <Plugin alias="PowerShell" dllName="Com.Aternity.Agent.PowerShellPlugin.dll" frequency="86400000" invokeWhenNotReporting="true" reportingFrequency="86400000"/>
        <Parameters>
            <Parameter name="ScriptTimeout" value="40000"/>
            <Parameter name="ScriptContext" value="System"/>
            <Parameter name="Script" value="ScriptCdata">
                <Script><![CDATA[Try
{
	#Set new environment for Action Extensions Methods 
    Add-Type -Path $env:STEELCENTRAL_ATERNITY_AGENT_HOME\ActionExtensionsMethods.dll
	#Set Domain
    $domain = Get-ItemPropertyValue -path 'HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters\' -name Domain
    # Silently Connect to domain
    If ((Get-WmiObject Win32_OperatingSystem).Version -like "*10.0*") {
        $ConnectedNow = (Test-NetConnection $domain -Port 636).TcpTestSucceeded
    } Else {
        $ConnectedNow = Test-Connection $domain -quiet
    }
	#Grab Last Conencted date from event Log with Timespan
	$EvLogLastConnect = (Get-WinEvent -logname "Microsoft-Windows-NetworkProfile/Operational" |where-object {$_.ID -eq "10000"} |Where-Object {$_.message -like "*Domain Authenticated*"} |Group-object ID |Foreach-Object {$_.Group | Sort-Object TimeCreated | Select-Object -Last 1}).TimeCreated |New-TimeSpan
	#Grab Last Conencted date from event Log for actual Date
	$EvLogLastConnectDate = (Get-WinEvent -logname "Microsoft-Windows-NetworkProfile/Operational" |where-object {$_.ID -eq "10000"} |Where-Object {$_.message -like "*Domain Authenticated*"} |Group-object ID |Foreach-Object {$_.Group | Sort-Object TimeCreated | Select-Object -Last 1}).TimeCreated

	If ($ConnectedNow -eq $False)
	{
		#Grab Last Disconnected Date from event log with Timespan
		$EvLogLastDisConn = (Get-WinEvent -logname "Microsoft-Windows-NetworkProfile/Operational" |where-object {$_.ID -eq "10001"} |Where-Object {$_.message -like "*Domain Authenticated*"} |Group-object ID |Foreach-Object {$_.Group | Sort-Object TimeCreated | Select-Object -Last 1}).TimeCreated|New-TimeSpan
		#Grab Last Disconnected date from Event Log for actual Date
		$EvLogLastDisConnDate = (Get-WinEvent -logname "Microsoft-Windows-NetworkProfile/Operational" |where-object {$_.ID -eq "10001"} |Where-Object {$_.message -like "*Domain Authenticated*"} |Group-object ID |Foreach-Object {$_.Group | Sort-Object TimeCreated | Select-Object -Last 1}).TimeCreated
		If ($EvLogLastDisConn.TotalHours -lt $EvLogLastConnect.TotalHours)
		{
			$ConnectionPeriod = [math]::round($EvLogLastConnect.TotalHours - $EvLogLastDisConn.TotalHours,2)
			$VPNConnectionDateTime = "This device was connected to domain for period of $ConnectionPeriod Hours. Last connection to $domain domain was at $EvLogLastConnectDate"
			$DaysSinceLastConnected = [math]::round($EvLogLastDisConn.TotalDays,2)
		}
		else 
		{
			$VPNConnectionDateTime = "Eventlogs do not indicate period online, perhaps device not gracefully shutdown."
			$ConnectionPeriod = 0
			$DaysSinceLastConnected = [math]::round($EvLogLastConnect.TotalDays,2)
		}
	} 
	else 
	{
		$ConnectionPeriod = [math]::round($EvLogLastConnect.TotalHours,2)
		$VPNConnectionDateTime =  "This device has been connected to domain for period of $ConnectionPeriod Hours. Last connection to $Domain domain was at $EvLogLastConnectDate"
		$DaysSinceLastConnected = 0
	}
    #Write-Host $DaysSinceLastConnected
    if ( $DaysSinceLastConnected -gt "7.00" )
    {
        $HealthEvent = "Last AD Connection was " + $DaysSinceLastConnected + " days ago."
        #Write-Host $HealthEvent
        [ActionExtensionsMethods.PowershellPluginMethods]::SetComponent("System")
        [ActionExtensionsMethods.PowershellPluginMethods]::SetDetails($HealthEvent)
        [ActionExtensionsMethods.PowershellPluginMethods]::SetSubComponent("Operation System")
        [ActionExtensionsMethods.PowershellPluginMethods]::SetEventOccurred()
    }
    else
    {
        #Do not register health event
    }
}

catch 
{
	[ActionExtensionsMethods.ActionExtensionsMethods]::SetFailed($_.Exception.Message)
}

]]></Script>
            </Parameter>
        </Parameters>
    </AgentConfiguration>
</GenericPlugin>